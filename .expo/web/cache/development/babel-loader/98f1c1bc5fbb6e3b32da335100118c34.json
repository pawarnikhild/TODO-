{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _Reanimated$default$c, _Reanimated$default;\n\nimport React, { useEffect, useRef } from 'react';\nimport { BaseGesture, CALLBACK_TYPE } from \"./gesture\";\nimport { Reanimated } from \"./reanimatedWrapper\";\nimport { registerHandler, unregisterHandler } from \"../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../RNGestureHandlerModule\";\nimport { baseGestureHandlerWithMonitorProps, filterConfig, findNodeHandle } from \"../gestureHandlerCommon\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nimport { flingGestureHandlerProps } from \"../FlingGestureHandler\";\nimport { forceTouchGestureHandlerProps } from \"../ForceTouchGestureHandler\";\nimport { longPressGestureHandlerProps } from \"../LongPressGestureHandler\";\nimport { panGestureHandlerProps, panGestureHandlerCustomNativeProps } from \"../PanGestureHandler\";\nimport { tapGestureHandlerProps } from \"../TapGestureHandler\";\nimport { State } from \"../../State\";\nimport { EventType } from \"../../EventType\";\nimport { ActionType } from \"../../ActionType\";\nimport { isFabric, tagMessage } from \"../../utils\";\nimport { getShadowNodeFromRef } from \"../../getShadowNodeFromRef\";\nvar ALLOWED_PROPS = [].concat(_toConsumableArray(baseGestureHandlerWithMonitorProps), _toConsumableArray(tapGestureHandlerProps), _toConsumableArray(panGestureHandlerProps), _toConsumableArray(panGestureHandlerCustomNativeProps), _toConsumableArray(longPressGestureHandlerProps), _toConsumableArray(forceTouchGestureHandlerProps), _toConsumableArray(flingGestureHandlerProps));\n\nfunction convertToHandlerTag(ref) {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    var _ref$current$handlerT, _ref$current;\n\n    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup) {\n  var _interactionGroup$map, _interactionGroup$map2;\n\n  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {\n    return tag > 0;\n  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\n\nfunction dropHandlers(preparedGesture) {\n  for (var _iterator = _createForOfIteratorHelperLoose(preparedGesture.config), _step; !(_step = _iterator()).done;) {\n    var handler = _step.value;\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n    unregisterHandler(handler.handlerTag, handler.config.testId);\n  }\n}\n\nfunction checkGestureCallbacksForWorklets(gesture) {\n  if (gesture.config.runOnJS) {\n    return;\n  }\n\n  var areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);\n  var areSomeWorklets = gesture.handlers.isWorklet.includes(true);\n\n  if (areSomeNotWorklets && areSomeWorklets) {\n    console.error(tagMessage(\"Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.\"));\n  }\n}\n\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n      gestureConfig = _ref.gestureConfig,\n      gesture = _ref.gesture,\n      viewTag = _ref.viewTag;\n\n  if (!preparedGesture.firstExecution) {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  setImmediate(function () {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  });\n\n  var _loop = function _loop(handler) {\n    checkGestureCallbacksForWorklets(handler);\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n    setImmediate(function () {\n      var requireToFail = [];\n\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      var simultaneousWith = [];\n\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n    });\n  };\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(gesture), _step2; !(_step2 = _iterator2()).done;) {\n    var handler = _step2.value;\n\n    _loop(handler);\n  }\n\n  preparedGesture.config = gesture;\n\n  for (var _iterator3 = _createForOfIteratorHelperLoose(preparedGesture.config), _step3; !(_step3 = _iterator3()).done;) {\n    var _gesture = _step3.value;\n    var actionType = _gesture.shouldUseReanimated ? ActionType.REANIMATED_WORKLET : ActionType.JS_FUNCTION_NEW_API;\n    RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, actionType);\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    var isAnimatedGesture = function isAnimatedGesture(g) {\n      return g.shouldUseReanimated;\n    };\n\n    preparedGesture.animatedHandlers.value = gesture.filter(isAnimatedGesture).map(function (g) {\n      return g.handlers;\n    });\n  }\n}\n\nfunction updateHandlers(preparedGesture, gestureConfig, gesture) {\n  gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n\n  for (var i = 0; i < gesture.length; i++) {\n    var handler = preparedGesture.config[i];\n    checkGestureCallbacksForWorklets(handler);\n\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n\n  setImmediate(function () {\n    for (var _i = 0; _i < gesture.length; _i++) {\n      var _handler = preparedGesture.config[_i];\n      _handler.config = gesture[_i].config;\n      _handler.handlers = gesture[_i].handlers;\n      var requireToFail = extractValidHandlerTags(_handler.config.requireToFail);\n      var simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n      registerHandler(_handler.handlerTag, _handler, _handler.config.testId);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = preparedGesture.config.filter(function (g) {\n        return g.shouldUseReanimated;\n      }).map(function (g) {\n        return g.handlers;\n      });\n    }\n  });\n}\n\nfunction needsToReattach(preparedGesture, gesture) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n\n  for (var i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName || gesture[i].shouldUseReanimated !== preparedGesture.config[i].shouldUseReanimated) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(preparedGesture, needsRebuild) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(event) {\n    'worklet';\n\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(event) {\n    'worklet';\n\n    return event.eventType != null;\n  }\n\n  function getHandler(type, gesture) {\n    'worklet';\n\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType) {\n    'worklet';\n\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(type, gesture, event) {\n    'worklet';\n\n    var handler = getHandler(type, gesture);\n\n    if (gesture.isWorklet[type]) {\n      for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n        args[_key - 3] = arguments[_key];\n      }\n\n      handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));\n    } else if (handler) {\n      console.warn(tagMessage('Animated gesture callback must be a worklet'));\n    }\n  }\n\n  var sharedHandlersCallbacks = Reanimated.useSharedValue(null);\n  var lastUpdateEvent = Reanimated.useSharedValue([]);\n  var stateControllers = [];\n\n  var callback = function callback(event) {\n    'worklet';\n\n    var currentCallback = sharedHandlersCallbacks.value;\n\n    if (!currentCallback) {\n      return;\n    }\n\n    for (var i = 0; i < currentCallback.length; i++) {\n      var gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (event.oldState !== event.state && event.state === State.END) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.state !== event.oldState) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            var _gesture$changeEventC;\n\n            runWorklet(CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  var event = Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], needsRebuild);\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\nexport var GestureDetector = function GestureDetector(props) {\n  var _gestureConfig$toGest, _gestureConfig$toGest2;\n\n  var gestureConfig = props.gesture;\n  var gesture = (_gestureConfig$toGest = gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$toGest2 = gestureConfig.toGestureArray) === null || _gestureConfig$toGest2 === void 0 ? void 0 : _gestureConfig$toGest2.call(gestureConfig)) !== null && _gestureConfig$toGest !== void 0 ? _gestureConfig$toGest : [];\n  var useReanimatedHook = gesture.some(function (g) {\n    return g.shouldUseReanimated;\n  });\n  var viewRef = useRef(null);\n  var firstRenderRef = useRef(true);\n  var preparedGesture = React.useRef({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useReanimatedHook: useReanimatedHook\n  }).current;\n\n  if (useReanimatedHook !== preparedGesture.useReanimatedHook) {\n    throw new Error(tagMessage('You cannot change the thread the callbacks are ran on while the app is running'));\n  }\n\n  var needsToRebuildReanimatedEvent = preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);\n\n  if (preparedGesture.firstExecution) {\n    var _gestureConfig$initia;\n\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$initia = gestureConfig.initialize) === null || _gestureConfig$initia === void 0 ? void 0 : _gestureConfig$initia.call(gestureConfig);\n  }\n\n  if (useReanimatedHook) {\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n\n  useEffect(function () {\n    firstRenderRef.current = true;\n    var viewTag = findNodeHandle(viewRef.current);\n    attachHandlers({\n      preparedGesture: preparedGesture,\n      gestureConfig: gestureConfig,\n      gesture: gesture,\n      viewTag: viewTag\n    });\n    return function () {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n  useEffect(function () {\n    if (!firstRenderRef.current) {\n      var viewTag = findNodeHandle(viewRef.current);\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture: preparedGesture,\n          gestureConfig: gestureConfig,\n          gesture: gesture,\n          viewTag: viewTag\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  var refFunction = function refFunction(ref) {\n    if (ref !== null) {\n      viewRef.current = ref;\n\n      if (isFabric()) {\n        var node = getShadowNodeFromRef(ref);\n\n        if (global.isFormsStackingContext(node) === false) {\n          setImmediate(function () {\n            console.error(tagMessage('GestureDetector has received a child that may get view-flattened. ' + '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));\n          });\n        }\n      }\n    }\n  };\n\n  if (useReanimatedHook) {\n    return React.createElement(AnimatedWrap, {\n      ref: refFunction,\n      onGestureHandlerEvent: preparedGesture.animatedEventHandler\n    }, props.children);\n  } else {\n    return React.createElement(Wrap, {\n      ref: refFunction\n    }, props.children);\n  }\n};\n\nvar Wrap = function (_React$Component) {\n  _inherits(Wrap, _React$Component);\n\n  var _super = _createSuper(Wrap);\n\n  function Wrap() {\n    _classCallCheck(this, Wrap);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Wrap, [{\n    key: \"render\",\n    value: function render() {\n      var child = React.Children.only(this.props.children);\n      return React.cloneElement(child, {\n        collapsable: false\n      }, child.props.children);\n    }\n  }]);\n\n  return Wrap;\n}(React.Component);\n\nvar AnimatedWrap = (_Reanimated$default$c = Reanimated === null || Reanimated === void 0 ? void 0 : (_Reanimated$default = Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;","map":{"version":3,"sources":["GestureDetector.tsx"],"names":["ALLOWED_PROPS","ref","interactionGroup","tag","preparedGesture","RNGestureHandlerModule","handler","unregisterHandler","gesture","areSomeNotWorklets","areSomeWorklets","console","tagMessage","viewTag","gestureConfig","setImmediate","checkGestureCallbacksForWorklets","filterConfig","registerHandler","requireToFail","extractValidHandlerTags","simultaneousWith","simultaneousHandlers","waitFor","actionType","ActionType","isAnimatedGesture","g","i","event","CALLBACK_TYPE","EventType","getHandler","sharedHandlersCallbacks","Reanimated","lastUpdateEvent","stateControllers","callback","currentCallback","isStateChangeEvent","State","runWorklet","isTouchEvent","GestureStateManager","touchEventTypeToCallbackType","GestureDetector","props","useReanimatedHook","viewRef","useRef","firstRenderRef","config","animatedEventHandler","animatedHandlers","firstExecution","needsToRebuildReanimatedEvent","needsToReattach","useAnimatedGesture","useEffect","findNodeHandle","attachHandlers","dropHandlers","updateHandlers","refFunction","isFabric","node","getShadowNodeFromRef","global","React","render","child","collapsable","AnimatedWrap"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  GestureType,\n  HandlerCallbacks,\n  BaseGesture,\n  GestureRef,\n  CALLBACK_TYPE,\n} from './gesture';\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\nimport {\n  baseGestureHandlerWithMonitorProps,\n  filterConfig,\n  findNodeHandle,\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\nimport {\n  panGestureHandlerProps,\n  panGestureHandlerCustomNativeProps,\n} from '../PanGestureHandler';\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport { ComposedGesture } from './gestureComposition';\nimport { ActionType } from '../../ActionType';\nimport { isFabric, tagMessage } from '../../utils';\nimport { getShadowNodeFromRef } from '../../getShadowNodeFromRef';\n\ndeclare global {\n  function isFormsStackingContext(node: unknown): boolean | null; // JSI function\n}\n\nconst ALLOWED_PROPS = [\n  ...baseGestureHandlerWithMonitorProps,\n  ...tapGestureHandlerProps,\n  ...panGestureHandlerProps,\n  ...panGestureHandlerCustomNativeProps,\n  ...longPressGestureHandlerProps,\n  ...forceTouchGestureHandlerProps,\n  ...flingGestureHandlerProps,\n];\n\nexport type GestureConfigReference = {\n  config: GestureType[];\n  animatedEventHandler: unknown;\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  firstExecution: boolean;\n  useReanimatedHook: boolean;\n};\n\nfunction convertToHandlerTag(ref: GestureRef): number {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    // @ts-ignore in this case it should be a ref either to gesture object or\n    // a gesture handler component, in both cases handlerTag property exists\n    return ref.current?.handlerTag ?? -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\n  return (\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\n  );\n}\n\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\n  for (const handler of preparedGesture.config) {\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n\n    unregisterHandler(handler.handlerTag, handler.config.testId);\n  }\n}\n\nfunction checkGestureCallbacksForWorklets(gesture: GestureType) {\n  // if a gesture is explicitly marked to run on the JS thread there is no need to check\n  // if callbacks are worklets as the user is aware they will be ran on the JS thread\n  if (gesture.config.runOnJS) {\n    return;\n  }\n\n  const areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);\n  const areSomeWorklets = gesture.handlers.isWorklet.includes(true);\n\n  // if some of the callbacks are worklets and some are not, and the gesture is not\n  // explicitly marked with `.runOnJS(true)` show an error\n  if (areSomeNotWorklets && areSomeWorklets) {\n    console.error(\n      tagMessage(\n        `Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.`\n      )\n    );\n  }\n}\n\ninterface AttachHandlersConfig {\n  preparedGesture: GestureConfigReference;\n  gestureConfig: ComposedGesture | GestureType | undefined;\n  gesture: GestureType[];\n  viewTag: number;\n}\n\nfunction attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesture,\n  viewTag,\n}: AttachHandlersConfig) {\n  if (!preparedGesture.firstExecution) {\n    gestureConfig?.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  // use setImmediate to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  setImmediate(() => {\n    gestureConfig?.prepare();\n  });\n\n  for (const handler of gesture) {\n    checkGestureCallbacksForWorklets(handler);\n\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler, handler.config.testId);\n\n    // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(() => {\n      let requireToFail: number[] = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      let simultaneousWith: number[] = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(\n          handler.config.simultaneousWith\n        );\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n    });\n  }\n  preparedGesture.config = gesture;\n\n  for (const gesture of preparedGesture.config) {\n    const actionType = gesture.shouldUseReanimated\n      ? ActionType.REANIMATED_WORKLET\n      : ActionType.JS_FUNCTION_NEW_API;\n\n    RNGestureHandlerModule.attachGestureHandler(\n      gesture.handlerTag,\n      viewTag,\n      actionType\n    );\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    const isAnimatedGesture = (g: GestureType) => g.shouldUseReanimated;\n\n    preparedGesture.animatedHandlers.value = (gesture\n      .filter(isAnimatedGesture)\n      .map((g) => g.handlers) as unknown) as HandlerCallbacks<\n      Record<string, unknown>\n    >[];\n  }\n}\n\nfunction updateHandlers(\n  preparedGesture: GestureConfigReference,\n  gestureConfig: ComposedGesture | GestureType | undefined,\n  gesture: GestureType[]\n) {\n  gestureConfig?.prepare();\n\n  for (let i = 0; i < gesture.length; i++) {\n    const handler = preparedGesture.config[i];\n    checkGestureCallbacksForWorklets(handler);\n\n    // only update handlerTag when it's actually different, it may be the same\n    // if gesture config object is wrapped with useMemo\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n\n  // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  setImmediate(() => {\n    for (let i = 0; i < gesture.length; i++) {\n      const handler = preparedGesture.config[i];\n\n      handler.config = gesture[i].config;\n      handler.handlers = gesture[i].handlers;\n\n      const requireToFail = extractValidHandlerTags(\n        handler.config.requireToFail\n      );\n\n      const simultaneousWith = extractValidHandlerTags(\n        handler.config.simultaneousWith\n      );\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n\n      registerHandler(handler.handlerTag, handler, handler.config.testId);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = (preparedGesture.config\n        .filter((g) => g.shouldUseReanimated) // ignore gestures that shouldn't run on UI\n        .map((g) => g.handlers) as unknown) as HandlerCallbacks<\n        Record<string, unknown>\n      >[];\n    }\n  });\n}\n\nfunction needsToReattach(\n  preparedGesture: GestureConfigReference,\n  gesture: GestureType[]\n) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (let i = 0; i < gesture.length; i++) {\n    if (\n      gesture[i].handlerName !== preparedGesture.config[i].handlerName ||\n      gesture[i].shouldUseReanimated !==\n        preparedGesture.config[i].shouldUseReanimated\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(\n  preparedGesture: GestureConfigReference,\n  needsRebuild: boolean\n) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureStateChangeEvent {\n    'worklet';\n    // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureTouchEvent {\n    'worklet';\n    return event.eventType != null;\n  }\n\n  function getHandler(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>\n  ) {\n    'worklet';\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType: EventType): CALLBACK_TYPE {\n    'worklet';\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>,\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\n    ...args: any[]\n  ) {\n    'worklet';\n    const handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n      // @ts-ignore Logic below makes sure the correct event is send to the\n      // correct handler.\n      handler?.(event, ...args);\n    } else if (handler) {\n      console.warn(tagMessage('Animated gesture callback must be a worklet'));\n    }\n  }\n\n  // Hooks are called conditionally, but the condition is whether the\n  // react-native-reanimated is installed, which shouldn't change while running\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  >(null);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const lastUpdateEvent = Reanimated.useSharedValue<\n    (GestureUpdateEvent | undefined)[]\n  >([]);\n\n  // not every gesture needs a state controller, init them lazily\n  const stateControllers: GestureStateManagerType[] = [];\n\n  const callback = (\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\n  ) => {\n    'worklet';\n\n    const currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n\n    for (let i = 0; i < currentCallback.length; i++) {\n      const gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (\n            event.oldState === State.UNDETERMINED &&\n            event.state === State.BEGAN\n          ) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if (\n            (event.oldState === State.BEGAN ||\n              event.oldState === State.UNDETERMINED) &&\n            event.state === State.ACTIVE\n          ) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (\n            event.oldState !== event.state &&\n            event.state === State.END\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if (\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\n            event.state !== event.oldState\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(\n              touchEventTypeToCallbackType(event.eventType),\n              gesture,\n              event,\n              stateControllers[i]\n            );\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            runWorklet(\n              CALLBACK_TYPE.CHANGE,\n              gesture,\n              gesture.changeEventCalculator?.(\n                event,\n                lastUpdateEvent.value[gesture.handlerTag]\n              )\n            );\n\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const event = Reanimated.useEvent(\n    callback,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    needsRebuild\n  );\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\ninterface GestureDetectorProps {\n  gesture?: ComposedGesture | GestureType;\n}\nexport const GestureDetector: React.FunctionComponent<GestureDetectorProps> = (\n  props\n) => {\n  const gestureConfig = props.gesture;\n  const gesture = gestureConfig?.toGestureArray?.() ?? [];\n  const useReanimatedHook = gesture.some((g) => g.shouldUseReanimated);\n  const viewRef = useRef(null);\n  const firstRenderRef = useRef(true);\n\n  const preparedGesture = React.useRef<GestureConfigReference>({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useReanimatedHook: useReanimatedHook,\n  }).current;\n\n  if (useReanimatedHook !== preparedGesture.useReanimatedHook) {\n    throw new Error(\n      tagMessage(\n        'You cannot change the thread the callbacks are ran on while the app is running'\n      )\n    );\n  }\n\n  // Reanimated event should be rebuilt only when gestures are reattached, otherwise\n  // config update will be enough as all necessary items are stored in shared values anyway\n  const needsToRebuildReanimatedEvent =\n    preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);\n\n  if (preparedGesture.firstExecution) {\n    gestureConfig?.initialize?.();\n  }\n\n  if (useReanimatedHook) {\n    // Whether animatedGesture or gesture is used shouldn't change while the app is running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n\n  useEffect(() => {\n    firstRenderRef.current = true;\n    const viewTag = findNodeHandle(viewRef.current) as number;\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesture,\n      viewTag,\n    });\n\n    return () => {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!firstRenderRef.current) {\n      const viewTag = findNodeHandle(viewRef.current) as number;\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesture,\n          viewTag,\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  const refFunction = (ref: unknown) => {\n    if (ref !== null) {\n      //@ts-ignore Just setting the ref\n      viewRef.current = ref;\n\n      if (isFabric()) {\n        const node = getShadowNodeFromRef(ref);\n        if (global.isFormsStackingContext(node) === false) {\n          setImmediate(() => {\n            // For some weird reason, console.error on iOS delays\n            // the execution of RNGestureHandlerModule.attachGestureHandler,\n            // so that's why we use setImmediate here.\n            console.error(\n              tagMessage(\n                'GestureDetector has received a child that may get view-flattened. ' +\n                  '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'\n              )\n            );\n          });\n        }\n      }\n    }\n  };\n\n  if (useReanimatedHook) {\n    return (\n      <AnimatedWrap\n        ref={refFunction}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={refFunction}>{props.children}</Wrap>;\n  }\n};\n\nclass Wrap extends React.Component<{ onGestureHandlerEvent?: unknown }> {\n  render() {\n    // I don't think that fighting with types over such a simple function is worth it\n    // The only thing it does is add 'collapsable: false' to the child component\n    // to make sure it is in the native view hierarchy so the detector can find\n    // correct viewTag to attach to.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const child: any = React.Children.only(this.props.children);\n    return React.cloneElement(\n      child,\n      { collapsable: false },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      child.props.children\n    );\n  }\n}\n\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\n"]},"metadata":{},"sourceType":"module"}